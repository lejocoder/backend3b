{"version":3,"sources":["components/persons.js","components/form.js","components/filter.js","services/persons.js","components/notification.js","components/error.js","App.js","index.js"],"names":["Persons","_ref","persons","submit","map","person","react_default","a","createElement","key","name","number","onClick","value","id","Form","props","onSubmit","newName","onChange","nameChange","newPhone","phoneChange","type","Filter","searchValue","searchHandler","baseUrl","services_persons","axios","get","then","response","data","newObject","post","put","concat","oldObject","newLink","delete","Notification","message","className","Error","App","_useState","useState","_useState2","Object","slicedToArray","setPersons","_useState3","_useState4","setNewName","_useState5","_useState6","setNewPhone","_useState7","_useState8","newSearch","setNewSearch","_useState9","_useState10","successMessage","setSuccessMessage","_useState11","_useState12","errorMessage","setErrorMessage","useEffect","personsService","serverPersons","myFilter","filter","includes","notification","error","event","console","log","target","components_form","preventDefault","names","foundPersonByName","find","personObject","window","confirm","setTimeout","catch","returnedPerson","components_persons","foundPerson","parseInt","ReactDOM","render","src_App","document","getElementById"],"mappings":"6MAeeA,EAbC,SAAAC,GACd,IADgBC,EAChBD,EADgBC,QAASC,EACzBF,EADyBE,OAEvB,OACED,EAAQE,IAAI,SAACC,GAEX,OAEEC,EAAAC,EAAAC,cAAA,MAAIC,IAAOJ,EAAOK,MAAOL,EAAOK,KAAO,IAAML,EAAOM,OAApD,IAA4DL,EAAAC,EAAAC,cAAA,UAAQI,QAAWT,EAAQU,MAAQR,EAAOS,IAA1C,cCUvDC,EAjBF,SAACC,GAEV,OACIV,EAAAC,EAAAC,cAAA,QAAMS,SAAYD,EAAMb,QACpBG,EAAAC,EAAAC,cAAA,oBACUF,EAAAC,EAAAC,cAAA,SAAOK,MAAQG,EAAME,QAASC,SAAYH,EAAMI,cAE1Dd,EAAAC,EAAAC,cAAA,sBACYF,EAAAC,EAAAC,cAAA,SAAOK,MAASG,EAAMK,SAAUF,SAAYH,EAAMM,eAE9DhB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAQe,KAAK,UAAb,UCADC,EAXA,SAACR,GAEZ,OACIV,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAAA,+BACqBF,EAAAC,EAAAC,cAAA,SAAOK,MAAQG,EAAMS,YAAaN,SAAYH,EAAMU,mCCL/EC,EAAU,eA4BDC,EAxBA,WAEX,OADgBC,IAAMC,IAAIH,GACXI,KAAK,SAAAC,GAAQ,OAAIA,EAASC,QAsB9BL,EAlBA,SAAAM,GAEX,OADgBL,IAAMM,KAAKR,EAASO,GACrBH,KAAK,SAAAC,GAAQ,OAAIA,EAASC,QAgB9BL,EAJA,SAACd,EAAIoB,GAChB,OAAOL,IAAMO,IAAN,GAAAC,OAAaV,EAAb,KAAAU,OAAwBvB,GAAMoB,IAG1BN,EAbM,SAAAU,GACjB,IAAMC,EAAUZ,EAAU,IAAMW,EAGhC,OADgBT,IAAMW,OAAOD,GACdR,KAAK,SAAAC,GAAQ,OAAIA,EAASC,QCP9BQ,EAZM,SAAAxC,GAAe,IAAbyC,EAAazC,EAAbyC,QACnB,MAAgB,KAAZA,EACO,KAIPpC,EAAAC,EAAAC,cAAA,OAAKmC,UAAW,iBACXD,ICKEE,EAZD,SAAA3C,GAAe,IAAbyC,EAAazC,EAAbyC,QACZ,MAAgB,KAAZA,EACO,KAIPpC,EAAAC,EAAAC,cAAA,OAAKmC,UAAW,SACXD,IC8IEG,EA/IH,WAAM,IAAAC,EACeC,mBAAS,CACtC,CACErC,KAAM,cACNC,OAAQ,iBAJIqC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACR5C,EADQ8C,EAAA,GACCG,EADDH,EAAA,GAAAI,EAOgBL,mBAAS,IAPzBM,EAAAJ,OAAAC,EAAA,EAAAD,CAAAG,EAAA,GAORlC,EAPQmC,EAAA,GAOCC,EAPDD,EAAA,GAAAE,EAQiBR,mBAAS,IAR1BS,EAAAP,OAAAC,EAAA,EAAAD,CAAAM,EAAA,GAQRlC,EARQmC,EAAA,GAQEC,EARFD,EAAA,GAAAE,EASmBX,mBAAS,IAT5BY,EAAAV,OAAAC,EAAA,EAAAD,CAAAS,EAAA,GASRE,EATQD,EAAA,GASGE,EATHF,EAAA,GAAAG,EAU4Bf,mBAAS,IAVrCgB,EAAAd,OAAAC,EAAA,EAAAD,CAAAa,EAAA,GAUTE,EAVSD,EAAA,GAUOE,EAVPF,EAAA,GAAAG,EAWwBnB,mBAAS,IAXjCoB,EAAAlB,OAAAC,EAAA,EAAAD,CAAAiB,EAAA,GAWTE,EAXSD,EAAA,GAWKE,EAXLF,EAAA,GAYhBG,oBAAU,WACRC,IAECxC,KAAK,SAAAyC,GACJrB,EAAWqB,MAEZ,IAEH,IA0GMC,EAAWvE,EAAQwE,OAAO,SAAArE,GAAM,OAAIA,EAAOK,KAAKiE,SAASf,KAC/D,OACEtD,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAACoE,EAAD,CAAclC,QAAUsB,IACxB1D,EAAAC,EAAAC,cAACqE,EAAD,CAAOnC,QAAW0B,IAClB9D,EAAAC,EAAAC,cAACkE,EAAD,CAAQjD,YAAemC,EAAWlC,cAzGX,SAACoD,GAC1BC,QAAQC,IAAIF,EAAMG,OAAOpE,OACzBgD,EAAaiB,EAAMG,OAAOpE,UAwGxBP,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAC0E,EAAD,CAAM/E,OAlFM,SAAC2E,GACfA,EAAMK,iBAEN,IAAMC,EAAQlF,EAAQE,IAAI,SAAAC,GAAM,OAAIA,EAAOK,OAErC2E,EAAoBnF,EAAQoF,KAAK,SAAAjF,GACrC,OAAOA,EAAOK,MAAQQ,IAElBqE,EAAe,CACnB7E,KAAMQ,EACNP,OAAQU,GAQN+D,EAAMT,SAASzD,GAKFsE,OAAOC,QAAP,GAAApD,OAAkBnB,EAAlB,2EAEbqD,EACQc,EAAkBvE,GAAIyE,GAAcxD,KAAK,SAAAC,GAC/CmB,EAAWjD,EAAQE,IAAI,SAAAC,GAAM,OAAIA,EAAOK,MAAQ6E,EAAa7E,KAAOL,EAASkF,KAC7EtB,EAAiB,SAAA5B,OAAUnB,IAC3BwE,WAAW,WACTzB,EAAkB,KACf,OAEN0B,MAAM,SAAAd,GACLR,EAAe,kBAAAhC,OAAmBnB,EAAnB,0CACfuC,EAAY,IACZH,EAAW,OAKbA,EAAW,IACXG,EAAY,MAKdsB,QAAQC,IAAI,qBAIZT,EACQgB,GACLxD,KAAK,SAAA6D,GACJzC,EAAWjD,EAAQmC,OAAOuD,IAC1Bb,QAAQC,IAAI,OACZ1B,EAAW,IACXG,EAAY,IACZQ,EAAiB,SAAA5B,OAAUnB,IAC3BwE,WAAW,WACTzB,EAAkB,KACf,OAER0B,MAAM,SAAAd,GACLvB,EAAW,IACXG,EAAY,IACZsB,QAAQC,IAAIH,EAAM7C,SAASC,MAC3BoC,EAAgBQ,EAAM7C,SAASC,UAeRf,QAAWA,EAASG,SAAYA,EAAUD,WAlH9C,SAAC0D,GACxBxB,EAAWwB,EAAMG,OAAOpE,QAiH6ES,YA/G7E,SAACwD,GAEzBrB,EAAYqB,EAAMG,OAAOpE,UA8GvBP,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAACqF,EAAD,CAASpF,IAAM,UAAUP,QAAWuE,EAAUtE,OA1GjC,SAAC2E,GAClBA,EAAMK,iBAEN,IAAMW,EAAc5F,EAAQoF,KAAK,SAAAjF,GAC/B,OAAOA,EAAOS,IAAMiF,SAASjB,EAAMG,OAAOpE,SAK7B2E,OAAOC,QAAP,UAAApD,OAAyByD,EAAYpF,KAArC,SAGb6D,EAA4BO,EAAMG,OAAOpE,OACzCsC,EAAWjD,EAAQwE,OAAO,SAAArE,GAC1B,OAAOA,EAAOS,KAAOiF,SAASjB,EAAMG,OAAOpE,iBC/CjDmF,IAASC,OAAO3F,EAAAC,EAAAC,cAAC0F,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.6dbbca75.chunk.js","sourcesContent":["import React from 'react'\n\nconst Persons = ({persons, submit}) => \n  {\n    return (\n      persons.map((person) => {\n        //console.log(typeof(person.id))\n        return (\n          \n          <li key = {person.name}>{person.name + \" \" + person.number} <button onClick = {submit} value= {person.id}>delete</button></li>\n        )\n      }) \n    )\n  }\n\nexport default Persons","import React from 'react'\n\nconst Form = (props) => \n{\n    return (\n        <form onSubmit = {props.submit}>\n            <div>\n                name: <input value ={props.newName} onChange = {props.nameChange}/>\n            </div>\n            <div>\n                number: <input value = {props.newPhone} onChange = {props.phoneChange} />\n            </div>\n            <div>\n                <button type=\"submit\" >add</button>\n            </div>\n        </form>\n    )\n}\n\nexport default Form","import React from 'react'\n\nconst Filter = (props) =>\n{\n    return (\n        <form> \n            <div>\n                input shown with <input value ={props.searchValue} onChange = {props.searchHandler}/>\n            </div>\n        </form>\n    )\n}\n\nexport default Filter","import axios from 'axios'\n\nconst baseUrl = '/api/persons'\n\n// it looks like we cant do a one liner here for some reason. looks like its \n// better to set up like this for some reaosn but it works!.\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n}\n\n// for create, we first post it to the server, then we return the response.data \nconst create = newObject => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data)\n}\n\nconst deleteObject = oldObject => {\n    const newLink = baseUrl + \"/\" + oldObject\n    //console.log(newLink)\n    const request = axios.delete(newLink)\n    return request.then(response => response.data)\n}\n\n\n// use url to replace the curernt,wiht a new object \nconst update = (id, newObject) => {\n    return axios.put(`${baseUrl}/${id}`, newObject)\n}\n\nexport default {\n    getAll,\n    create,\n    update,\n    deleteObject\n}","import React from 'react'\n\nconst Notification = ({message}) => {\n    if (message === \"\") {\n        return null\n    }\n\n    return (\n        <div className= \"notifySuccess\">\n            {message}\n        </div>\n    )\n}\n\nexport default Notification","import React from 'react'\n\nconst Error = ({message}) => {\n    if (message === \"\") {\n        return null\n    }\n\n    return (\n        <div className= \"error\">\n            {message}\n        </div>\n    )\n}\n\nexport default Error","import React, { useState, useEffect } from 'react'\n// 2.9 DONE, this is the one w/o a button 2.11 will attempt to implement a button\nimport Persons from './components/persons'\nimport Form from './components/form'\nimport Filter from './components/filter'\nimport personsService from './services/persons'\nimport Notification from './components/notification.js'\nimport Error from './components/error'\nconst App = () => {\n  const [ persons, setPersons] = useState([\n    { \n      name: 'Arto Hellas',\n      number: '040-1234567' // we should have strings always \n    }\n  ]) // we set persons with an intial array containing arto hellas\n  const [ newName, setNewName ] = useState('') // newName is empty\n  const [ newPhone, setNewPhone] = useState('')\n  const [ newSearch, setNewSearch] = useState('')\n  const [successMessage, setSuccessMessage] = useState('')\n  const [errorMessage, setErrorMessage] = useState('')\n  useEffect(() => {\n    personsService\n    .getAll()\n    .then(serverPersons => {\n      setPersons(serverPersons)\n    })\n  }, []) // if the server is not up! then we just are set up with \n  // default array of persons\n  const handleNameChange = (event) => { // our event handler whenever \n    setNewName(event.target.value)\n  }\n  const handlePhoneChange = (event) => {\n    //console.log(event.target.value) // this is to check temporailty\n    setNewPhone(event.target.value)\n  } \n  const handleSearchChange = (event) => {\n    console.log(event.target.value)\n    setNewSearch(event.target.value)\n  }\n  const deleteName = (event) => {\n    event.preventDefault()\n    // this is tot find the person we want to delete, we want to extract the name when we make the window alert\n    const foundPerson = persons.find(person => {\n      return person.id == parseInt(event.target.value)\n    })\n    //console.log(name)\n    // result is the bool that is returned which we will use in the if to make sure the user want \n    // to delete this\n    const result = window.confirm(`Delete ${foundPerson.name} ?`)\n    //console.log(event.target.value)\n    if (result) {\n      personsService.deleteObject(event.target.value)\n      setPersons(persons.filter(person => {\n      return person.id !== parseInt(event.target.value);\n    }))\n  }\n      \n    \n  }\n  \n  const addName = (event) => {\n    event.preventDefault() // avoids the default \n    //action that it usually does\n    const names = persons.map(person => person.name) // we map this so we can get a \n    //proper array to work with, (no annyoing curly braces)\n    const foundPersonByName = persons.find(person => {\n      return person.name == newName\n    })\n    const personObject = {\n      name: newName,\n      number: newPhone\n    }\n    // writeup for new 2.18  whne we attempt tto add\n    // a name already in, we offer user to update their number\n    // we pop up a window\n    // if user says ok to this window\n    // update the backend server\n    // then update the frontend \n    if (names.includes(newName)) { \n      // use includes to check if newName is in the arrya,\n      // if it is put up an alert and reset the textbox by resetting \n      //newName to \"\"\n      //window.alert(`${newName} is already added to phonebook`)\n      const result = window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`)\n      if (result) {\n        personsService\n        .update(foundPersonByName.id, personObject).then(response => {\n          setPersons(persons.map(person => person.name != personObject.name ? person : personObject))\n          setSuccessMessage(`Added ${newName}`)\n          setTimeout(() => {\n            setSuccessMessage(\"\")\n            }, 5000); // 5000 ms = 5\n        })\n        .catch(error => {\n          setErrorMessage(`Information of ${newName} has already been removed from server`)\n          setNewPhone('')\n          setNewName('')\n        })\n\n      }\n      else {\n        setNewName('')\n        setNewPhone('')\n      }\n    \n    }\n    else {\n      console.log(\"we went thru baby\")\n      // for this create when we use it we automatically have data, go thru a promise\n      // which uses returnedPerson which then we use to update our persons for the frontend\n\n      personsService\n      .create(personObject)\n        .then(returnedPerson => {        \n          setPersons(persons.concat(returnedPerson))\n          console.log('oof')\n          setNewName(\"\")\n          setNewPhone(\"\")\n          setSuccessMessage(`Added ${newName}`)\n          setTimeout(() => {\n            setSuccessMessage(\"\")\n            }, 5000); // 5000 ms = 5\n      })\n      .catch(error => {\n        setNewName(\"\")\n        setNewPhone(\"\")\n        console.log(error.response.data)\n        setErrorMessage(error.response.data)\n      })\n      // fuck misspelling\n    }\n  \n  }\n  //const myFilter = filterBool ? persons : persons.filter(person => person.name.includes(newSearch))\n  const myFilter = persons.filter(person => person.name.includes(newSearch)) // this is so when we add to it we filter it by substring in the box\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message= {successMessage}/>\n      <Error message = {errorMessage}/>\n      <Filter searchValue = {newSearch} searchHandler = {handleSearchChange} />\n      <h2>add a new</h2>\n      <Form submit = {addName} newName = {newName} newPhone = {newPhone} nameChange = {handleNameChange} phoneChange ={handlePhoneChange} />\n      <h2>Numbers</h2>\n      <ul>\n        <Persons key = \"Persons\" persons = {myFilter} submit = {deleteName}/>\n      </ul>\n    </div>\n  )\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}